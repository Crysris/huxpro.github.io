---
layout:     post
title:      "STL"
subtitle:   "STL"
date:       2021-06-06 21:00:00
author:     "Messier"
header-img: "img/galaxy.jpg"
header-mask: 0.3
catalog:    true
tags:
    - C++
    - 编程
    - STL

---

# STL基础

## unordered_set   与   unordered_map

### 定义

unordered_map：存储key-value键值对，且键key不允许重复，存储的键值对是无序的

unordered_set：直接存储数据value本身（也可理解为，存储的全部都是键 key 和值 value 相等的键值对）

### 示例

```c++
unordered_set<int> m_set;
srand(int(time(nullptr)));
unordered_set<int>::iterator iter;
for(int i=0;i<50;i++){
  int j=rand()%50;
  iter=m_set.find(j);
  if(iter==m_set.end()){
    m_set.insert(j);
    cout<<"new value inserted :"<<j<<" size : "<<m_set.size()<<endl;
  }
}
```

```c++
unordered_map<int, double> m_map;
unordered_map<int,double>::iterator iter;
srand(int(time(nullptr)));
for(int i=0;i<50;i++){
  int j=rand()%50;
  iter=m_map.find(j);
  if(iter==m_map.end()){
    double k=M_PI*pow(j,2);
    m_map.insert({j,k});
    cout<<fixed;
    cout<<setprecision(2);
    cout<<"new element inserted : {"<<j<<","<<k<<"} size : "<<m_map.size()<<endl;
  }
}
```

## set 与 map

### 定义

与unordered_set，unordered_map唯一的区别就是储存的元素会根据key排序
|     容器      | 储存机制 | 是否有序 |
| :-----------: | -------- | -------- |
| unordered_set | 哈希表   | 无序     |
| unordered_map | 哈希表   | 无序     |
|      set      | 红黑树   | 有序     |
|      map      | 红黑树   | 有序     |



## vector

### 定义

动态数组，可以动态分配空间，随着元素的不断插入，vector会按照自身的一套机制不断扩充自身的容量。        

### 存储机制：

顺序存储，vector分配的是一块连续的内存空间。

vector每次提升容量时，并不是在原有连续的内存空间后再进行简单的叠加，而是重新申请一块更大的新内存，容量为现在的2倍，并把现有容器中的元素逐个复制过去，然后销毁旧的内存。这时原有指向旧内存空间的迭代器已经失效，所以当操作容器时，迭代器要及时更新。

